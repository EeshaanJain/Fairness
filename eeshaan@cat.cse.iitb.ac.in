{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "13baee03",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/eeshaan/Documents/virtual_env/apricot-env/lib/python3.8/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import utils\n",
    "import torch\n",
    "import pandas as pd\n",
    "\n",
    "from tqdm import tqdm\n",
    "\n",
    "\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1e0e42c3",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c5774c74-3b4a-46ce-9e04-0e66f33a5484",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "device(type='cpu')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "device"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6b387492",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "dfx, dfy, cols = utils.get_dataset('adult_income', return_dataframe=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9581b9b3-da68-4817-944c-02228ab08e6d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import minmax_scale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "253da5dd-d08f-448a-89cc-7f49bbfa7edf",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "minmax_separate = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "223a6870-276a-4949-8612-dffd8fc4b6af",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "if minmax_separate:\n",
    "    dfx_1 = dfx.loc[dfx.gender == 1]\n",
    "    dfx_0 = dfx.loc[dfx.gender == 0]\n",
    "    dfx_1[cols] = minmax_scale(dfx_1[cols])\n",
    "    dfx_0[cols] = minmax_scale(dfx_0[cols])\n",
    "else:\n",
    "    dfx[cols] = minmax_scale(dfx[cols])\n",
    "    dfx_1 = dfx.loc[dfx.gender == 1]\n",
    "    dfx_0 = dfx.loc[dfx.gender == 0]\n",
    "    dfy_1 = dfy.loc[dfx.gender == 1]\n",
    "    dfy_0 = dfy.loc[dfx.gender == 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2bdb04ca-f68f-4f06-a755-f5df14c49d8e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "tensor_data_x0 = torch.tensor(dfx_0.values).to(device)\n",
    "tensor_data_y0 = torch.tensor(dfy_0.values).to(device)\n",
    "tensor_data_x1 = torch.tensor(dfx_1.values).to(device)\n",
    "tensor_data_y1 = torch.tensor(dfy_1.values).to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "8fd51e03-d2a7-4d69-b16b-1169407c835b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([31114, 102])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tensor_data_x0.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9a914b28-3d7e-4218-959a-25ecab5eda94",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b80fc984-3fc2-47dc-ba7a-1767ac0150b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "INITIAL = 500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d0424a95-fba1-489a-b90e-8fde4b9a581a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "warm_start_samples_0 = utils.sample_from_tensor(tensor_data_x0.shape[0], INITIAL, device).long()\n",
    "warm_start_samples_1 = utils.sample_from_tensor(tensor_data_x1.shape[0], INITIAL, device).long()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5a200bf3-f758-490e-8050-7744fc5c5748",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "non_warm_start_samples_0 = utils.complement_idx(warm_start_samples_0, tensor_data_x0.shape[0])\n",
    "non_warm_start_samples_1 = utils.complement_idx(warm_start_samples_1, tensor_data_x1.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "8444423c-75ae-47e7-8bf6-9dfa6d7f02c4",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "warm_start_x0, warm_start_y0 = tensor_data_x0[warm_start_samples_0], tensor_data_y0[warm_start_samples_0]\n",
    "warm_start_x1, warm_start_y1 = tensor_data_x1[warm_start_samples_1], tensor_data_y1[warm_start_samples_1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "db5b402f-40e6-4a66-a147-b3446e47814d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.1840)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "warm_start_y0.float().mean() - warm_start_y1.float().mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "451bc4b8-ff4d-491a-90a3-f2fa6efb877d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "tensor_data_x0, tensor_data_y0 = tensor_data_x0[non_warm_start_samples_0], tensor_data_y0[non_warm_start_samples_0]\n",
    "tensor_data_x1, tensor_data_y1 = tensor_data_x1[non_warm_start_samples_1], tensor_data_y1[non_warm_start_samples_1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "1e759cd8",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from blackbox_models import BlackBox"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "933d864a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "blackbox = BlackBox('Logistic', 102, 1)\n",
    "blackbox.load_state_dict(torch.load(\"checkpoints/adult_income/blackbox/Logistic/best.pt\", map_location='cpu'))\n",
    "blackbox.eval()\n",
    "blackbox.to(device);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "110d7011-d622-4259-8915-3726eb47d70a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "k_nearby_points = 100\n",
    "total_selection = 4000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "60339dfc-42e6-4f5b-9f1a-c3f93f4b651b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.1994)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tensor_data_y0.float().mean() - tensor_data_y1.float().mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "8f05c603-abfd-4d31-b321-dd23d82354ed",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([500, 102])"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "warm_start_x0.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "21fe1946-175b-47c8-b921-c97c12474770",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import numpy as np\n",
    "class naive_model(nn.Module):\n",
    "    def __init__(self, feature_dim,device):\n",
    "        super(naive_model, self).__init__()\n",
    "        self.device = device\n",
    "        self.net = nn.Linear(feature_dim, feature_dim)\n",
    "        self.feature_dim = feature_dim\n",
    "    def forward(self):\n",
    "        return self.net(torch.ones(1,self.feature_dim).to(self.device))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "3e21d49e-b64c-473d-843e-be96836056a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "nm = naive_model(102, 'cpu')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "41b3a704-83aa-4fd7-bf0f-4e68370a52cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([1, 102])"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nm().shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "fc3782c1-fb0c-4b8e-8175-eb4e971ec30f",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# k(x ∗ , x ∗ ) + σ 2noise − k(x ∗ , x) > [K + σ 2noise I] −1 k(x ∗ , x)\n",
    "\n",
    "def compute_variance(x_new,X):\n",
    "    A = x_new@X.t()\n",
    "    K =  X@X.t()\n",
    "    ##k(x_new,x_new)           ## torch.sum(x_new.X[i,:])\n",
    "    return torch.sum(x_new * x_new)  - A@torch.inverse(K+0.1)@A.t() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "90abb806-30a7-457d-b13e-f25cae843e51",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([1, 500])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_new =  nm().float()\n",
    "X =  warm_start_x0.float()\n",
    "\n",
    "A = x_new@X.t()\n",
    "A.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "402c1f58-4496-491e-b328-d44050ae06f1",
   "metadata": {},
   "source": [
    "First point -> either sample from the first 1000 random points\n",
    "or sample from the input space\n",
    "\n",
    "Q = 5000\n",
    "Qi = 1000\n",
    "\n",
    "4000 <- (x' <- random)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "15fdd9d4-e2cc-4f83-a455-f9b857936ac4",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def compute_variance(x_new,X,device):\n",
    "    A = x_new@(X.t())\n",
    "    K =  X@(X.t())\n",
    "    K_plus_I_inv = torch.inverse(K+0.1*torch.eye(K.shape[0]).to(device))\n",
    "    return torch.sum(x_new * x_new) +0.1 - A@K_plus_I_inv@A.t() \n",
    "\n",
    "def compute_mean(x_new,X,y,device):\n",
    "    #  k(x ∗ , x) T [K + σ 2noise I] −1 y\n",
    "    K =  X@(X.t())\n",
    "    A = x_new@(X.t())\n",
    "    K_plus_I_inv = torch.inverse(K+0.1*torch.eye(K.shape[0]).float().to(device))\n",
    "    m = A@K_plus_I_inv@y\n",
    "    return m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "c4a3893d-8f62-4e1d-bda0-c38f910c908d",
   "metadata": {},
   "outputs": [],
   "source": [
    "BUDGET = 5000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "929a932d-fd6d-481b-af6c-aab611b8eb12",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_disparity(x1, x2):\n",
    "    return torch.abs(blackbox(x1.float()).mean() - blackbox(x2.float()).mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "a5974703-24c3-4d2f-bb0c-ffadeb7a8007",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  2%|▉                                           | 1/45 [00:00<00:06,  7.16it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Disparity @ 0: 0.1871395707130432\n",
      "--> Triggering Early stop: current loss: tensor([[0.4369]], grad_fn=<DivBackward0>), best loss: tensor([[0.2298]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 1: 0.1484164595603943\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  4%|█▉                                          | 2/45 [00:00<00:11,  3.88it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.0943]], grad_fn=<DivBackward0>), best loss: tensor([[0.0200]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 2: 0.16368448734283447\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  7%|██▉                                         | 3/45 [00:01<00:16,  2.49it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.0767]], grad_fn=<DivBackward0>), best loss: tensor([[0.0213]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 3: 0.15614007413387299\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  9%|███▉                                        | 4/45 [00:01<00:20,  1.99it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.0855]], grad_fn=<DivBackward0>), best loss: tensor([[0.0184]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 4: 0.14818575978279114\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 11%|████▉                                       | 5/45 [00:02<00:18,  2.13it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.5171]], grad_fn=<DivBackward0>), best loss: tensor([[0.1158]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 5: 0.13352511823177338\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 13%|█████▊                                      | 6/45 [00:02<00:18,  2.12it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.6284]], grad_fn=<DivBackward0>), best loss: tensor([[0.0005]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 6: 0.12678229808807373\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 16%|██████▊                                     | 7/45 [00:04<00:34,  1.12it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.0386]], grad_fn=<DivBackward0>), best loss: tensor([[0.0008]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 7: 0.13818728923797607\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 18%|███████▊                                    | 8/45 [00:05<00:30,  1.21it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.6563]], grad_fn=<DivBackward0>), best loss: tensor([[0.0574]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 8: 0.13089868426322937\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 20%|████████▊                                   | 9/45 [00:05<00:30,  1.19it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.2803]], grad_fn=<DivBackward0>), best loss: tensor([[0.0459]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 9: 0.12036687135696411\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 22%|█████████▌                                 | 10/45 [00:09<00:55,  1.60s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.0397]], grad_fn=<DivBackward0>), best loss: tensor([[0.0056]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 10: 0.1145174503326416\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 24%|██████████▌                                | 11/45 [00:13<01:18,  2.30s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.0333]], grad_fn=<DivBackward0>), best loss: tensor([[0.0007]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 11: 0.1167323887348175\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 27%|███████████▍                               | 12/45 [00:14<01:04,  1.95s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.3097]], grad_fn=<DivBackward0>), best loss: tensor([[0.2768]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 12: 0.10800707340240479\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 29%|████████████▍                              | 13/45 [00:18<01:21,  2.56s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.0635]], grad_fn=<DivBackward0>), best loss: tensor([[0.0057]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 13: 0.10402262210845947\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 31%|█████████████▍                             | 14/45 [00:19<01:11,  2.30s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.3127]], grad_fn=<DivBackward0>), best loss: tensor([[0.0322]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 14: 0.10836195945739746\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 33%|██████████████▎                            | 15/45 [00:21<01:07,  2.23s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.2832]], grad_fn=<DivBackward0>), best loss: tensor([[0.0872]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 15: 0.10347697138786316\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 36%|███████████████▎                           | 16/45 [00:24<01:03,  2.21s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.5346]], grad_fn=<DivBackward0>), best loss: tensor([[0.1963]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 16: 0.10532471537590027\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 38%|████████████████▏                          | 17/45 [00:32<01:56,  4.15s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.0523]], grad_fn=<DivBackward0>), best loss: tensor([[0.0071]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 17: 0.12034168839454651\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 40%|█████████████████▏                         | 18/45 [00:41<02:28,  5.48s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.0373]], grad_fn=<DivBackward0>), best loss: tensor([[0.0060]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 18: 0.112088143825531\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 42%|██████████████████▏                        | 19/45 [00:54<03:22,  7.78s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.0436]], grad_fn=<DivBackward0>), best loss: tensor([[0.0009]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 19: 0.12531307339668274\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 44%|███████████████████                        | 20/45 [00:57<02:41,  6.47s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.4994]], grad_fn=<DivBackward0>), best loss: tensor([[0.0240]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 20: 0.13514089584350586\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 47%|████████████████████                       | 21/45 [01:10<03:22,  8.44s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.0384]], grad_fn=<DivBackward0>), best loss: tensor([[0.0065]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 21: 0.13302266597747803\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 49%|█████████████████████                      | 22/45 [01:16<02:51,  7.46s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.4592]], grad_fn=<DivBackward0>), best loss: tensor([[0.1712]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 22: 0.13921180367469788\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 51%|█████████████████████▉                     | 23/45 [01:22<02:34,  7.02s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.4596]], grad_fn=<DivBackward0>), best loss: tensor([[0.4160]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 23: 0.13531583547592163\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 53%|██████████████████████▉                    | 24/45 [01:39<03:29,  9.97s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.0489]], grad_fn=<DivBackward0>), best loss: tensor([[0.0075]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 24: 0.13388942182064056\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 56%|███████████████████████▉                   | 25/45 [01:46<03:05,  9.26s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.3210]], grad_fn=<DivBackward0>), best loss: tensor([[0.2722]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 25: 0.12908664345741272\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 58%|████████████████████████▊                  | 26/45 [01:58<03:12, 10.16s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.4040]], grad_fn=<DivBackward0>), best loss: tensor([[0.1885]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 26: 0.1253991723060608\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 60%|█████████████████████████▊                 | 27/45 [02:08<03:02, 10.15s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.2992]], grad_fn=<DivBackward0>), best loss: tensor([[0.1861]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 27: 0.12195079028606415\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 62%|██████████████████████████▊                | 28/45 [02:19<02:52, 10.16s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.2368]], grad_fn=<DivBackward0>), best loss: tensor([[0.1558]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 28: 0.11963291466236115\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 64%|███████████████████████████▋               | 29/45 [02:31<02:53, 10.82s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.3064]], grad_fn=<DivBackward0>), best loss: tensor([[0.0881]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 29: 0.11546732485294342\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 67%|████████████████████████████▋              | 30/45 [03:06<04:33, 18.21s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--> Triggering Early stop: current loss: tensor([[0.0407]], grad_fn=<DivBackward0>), best loss: tensor([[0.0075]], grad_fn=<DivBackward0>), count: 10/10\n",
      "Disparity @ 30: 0.11256153881549835\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 67%|████████████████████████████▋              | 30/45 [03:16<01:38,  6.53s/it]\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Input \u001b[0;32mIn [54]\u001b[0m, in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[38;5;66;03m#x_new = nm().float()\u001b[39;00m\n\u001b[1;32m     21\u001b[0m x_new \u001b[38;5;241m=\u001b[39m nm()\u001b[38;5;241m.\u001b[39mfloat()\n\u001b[0;32m---> 22\u001b[0m mean_term \u001b[38;5;241m=\u001b[39m \u001b[43mcompute_mean\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx_new\u001b[49m\u001b[43m,\u001b[49m\u001b[43mcandidates0\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfloat\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43my0_new\u001b[49m\u001b[43m,\u001b[49m\u001b[43mdevice\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;241m+\u001b[39m compute_mean(x_new,candidates1,y1_new,device) \u001b[38;5;66;03m# likelihood0(model0(nm())).variance.sum(axis=0)\u001b[39;00m\n\u001b[1;32m     23\u001b[0m abs_mean \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mabs(mean_term)\n\u001b[1;32m     24\u001b[0m var_term \u001b[38;5;241m=\u001b[39m compute_variance(x_new,candidates0,device) \u001b[38;5;241m+\u001b[39m compute_variance(x_new,candidates1,device) \u001b[38;5;66;03m# likelihood0(model0(nm())).variance.sum(axis=0)\u001b[39;00m\n",
      "Input \u001b[0;32mIn [51]\u001b[0m, in \u001b[0;36mcompute_mean\u001b[0;34m(x_new, X, y, device)\u001b[0m\n\u001b[1;32m      9\u001b[0m K \u001b[38;5;241m=\u001b[39m  X\u001b[38;5;241m@\u001b[39m(X\u001b[38;5;241m.\u001b[39mt())\n\u001b[1;32m     10\u001b[0m A \u001b[38;5;241m=\u001b[39m x_new\u001b[38;5;241m@\u001b[39m(X\u001b[38;5;241m.\u001b[39mt())\n\u001b[0;32m---> 11\u001b[0m K_plus_I_inv \u001b[38;5;241m=\u001b[39m \u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minverse\u001b[49m\u001b[43m(\u001b[49m\u001b[43mK\u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[38;5;241;43m0.1\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43meye\u001b[49m\u001b[43m(\u001b[49m\u001b[43mK\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mshape\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfloat\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mto\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdevice\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     12\u001b[0m m \u001b[38;5;241m=\u001b[39m A\u001b[38;5;129m@K_plus_I_inv\u001b[39m\u001b[38;5;129m@y\u001b[39m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "candidates0 = warm_start_x0.clone().float()\n",
    "candidates1 = warm_start_x1.clone().float()\n",
    "y0_new = warm_start_y0.clone().float()\n",
    "y1_new = warm_start_y1.clone().float()\n",
    "\n",
    "for epoch_outer in tqdm(range((BUDGET - INITIAL)//k_nearby_points)):\n",
    "    # s = utils.sample_randomly_from_input_space('adult_income').to(device) \n",
    "    nm = naive_model(102,device).to(device)\n",
    "    # optimizer0 = torch.optim.AdamW((s,), lr=1e-5)\n",
    "    optimizer0 = torch.optim.Adam(nm.parameters(),\n",
    "                               1e-2,\n",
    "                               weight_decay=1e-5)\n",
    "    best_loss = 10e5\n",
    "    count = 0\n",
    "    losses = []\n",
    "    print(f'Disparity @ {epoch_outer}: {compute_disparity(candidates0, candidates1)}')\n",
    "    \n",
    "    for epoch in range(1,50):\n",
    "        optimizer0.zero_grad()\n",
    "        #x_new = nm().float()\n",
    "        x_new = nm().float()\n",
    "        mean_term = compute_mean(x_new,candidates0.float(),y0_new,device) + compute_mean(x_new,candidates1,y1_new,device) # likelihood0(model0(nm())).variance.sum(axis=0)\n",
    "        abs_mean = torch.abs(mean_term)\n",
    "        var_term = compute_variance(x_new,candidates0,device) + compute_variance(x_new,candidates1,device) # likelihood0(model0(nm())).variance.sum(axis=0)\n",
    "        # ll_term = 0 #- lambda_reg * ((s - x0_samples)**2).mean()\n",
    "        # obj0 =  var_term #+ ll_term\n",
    "        assert var_term >0\n",
    "        # loss = abs_mean/var_term\n",
    "        loss = abs_mean/torch.sqrt(var_term)\n",
    "        # if var_term < 0:\n",
    "        #     flagged_X0 = X0\n",
    "        #     flagged_X1 = X1\n",
    "        #     flagged_x_new = x_new\n",
    "        # print(\"mean, var, sum\",abs_mean.item(),var_term.item(),loss.item())\n",
    "        # print(\"at epoch\", epoch, \"we have loss\",loss.item())\n",
    "        #print(loss)\n",
    "        loss.backward()\n",
    "        optimizer0.step()\n",
    "        if loss < best_loss:\n",
    "            best_loss = loss\n",
    "            count = 0\n",
    "            losses.append(loss)\n",
    "        else:\n",
    "            count += 1\n",
    "        if count  == 10:\n",
    "            print(f'--> Triggering Early stop: current loss: {loss}, best loss: {best_loss}, count: {count}/10')\n",
    "            break\n",
    "            \n",
    "            \n",
    "            \n",
    "    \n",
    "    qx0, qy0, tensor_data_x0, tensor_data_y0 = utils.query_nearby(x_new, tensor_data_x0, tensor_data_y0, k_nearby_points)\n",
    "    qx1, qy1, tensor_data_x1, tensor_data_y1 = utils.query_nearby(x_new, tensor_data_x1, tensor_data_y1, k_nearby_points)\n",
    "\n",
    "    candidates0 = torch.cat((candidates0, qx0.float()), dim=0)\n",
    "    candidates1 = torch.cat((candidates1, qx1.float()), dim=0)\n",
    "    y0_new = torch.cat((y0_new, qy0.float()), dim=0)\n",
    "    y1_new = torch.cat((y1_new, qy1.float()), dim=0)\n",
    "    # if epoch_outer % 1 == 0\n",
    "    # #new_vals = torch.concatenate(candidates)\n",
    "    #     new_queries,_, _ = vae0(candidates.float().to(device))\n",
    "    #     new_labels = blackbox(new_queries)\n",
    "    #     neg_queried = torch.concatenate([neg_queried, new_queries])\n",
    "    #     neg_labels = torch.concatenate([neg_labels, (0.5*(torch.sign(new_labels - 0.5) + 1.0)).long().detach().clone()])\n",
    "    #     model0, likelihood0 = train(neg_queried.detach().clone(),neg_labels.flatten(), device)\n",
    "    #     model0.eval()\n",
    "    #     likelihood0.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "572fcc93-539e-43be-8698-7c1b676af235",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.1831, device='cuda:0', grad_fn=<SubBackward0>)"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "new_y0 =  blackbox(.float())\n",
    "new_y1 = blackbox(q1.float())\n",
    "new_y0.mean()-new_y1.mean()\n",
    "# warm_start_y0.float().mean() - warm_start_y1.float().mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "bd18302a-f5d7-4339-b3bc-f0dd5230f820",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[80.3355]], device='cuda:0', grad_fn=<SubBackward0>)"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = flagged_X0\n",
    "X =flagged_X1\n",
    "x_new = flagged_x_new\n",
    "A = x_new@(X.t())\n",
    "K =  X@(X.t())\n",
    "##k(x_new,x_new)           ## torch.sum(x_new.X[i,:])\n",
    "torch.sum(x_new * x_new) +0.1 - A@torch.inverse(K+0.1*torch.eye(K.shape[0]).to(device))@A.t() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0ec56dc-3ba8-47b3-89e2-61de95afbed5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "c12e4acc-6b39-47ca-a1cd-9f1cb9277c91",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[8.2852, 4.3340, 4.4040,  ..., 4.0772, 3.3389, 6.1568],\n",
       "        [4.3340, 8.5060, 4.5015,  ..., 5.0772, 3.4083, 6.1812],\n",
       "        [4.4040, 4.5015, 8.6500,  ..., 4.0732, 2.5113, 5.2155],\n",
       "        ...,\n",
       "        [4.0772, 5.0772, 4.0732,  ..., 8.0376, 3.0772, 5.0455],\n",
       "        [3.3389, 3.4083, 2.5113,  ..., 3.0772, 8.4153, 3.1837],\n",
       "        [6.1568, 6.1812, 5.2155,  ..., 5.0455, 3.1837, 8.0868]],\n",
       "       device='cuda:0')"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.sum(x_new * x_new) \n",
    "x_new@x_new.t()\n",
    "K"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "14bc51e0-1756-4f5a-a595-721de276b15b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[3.9061e+16]], device='cuda:0', grad_fn=<AddBackward0>)"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var_term"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "3af865ca-0c39-4fc7-a76f-59d882140cf5",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.float32\n",
      "torch.float32\n",
      "torch.float32\n",
      "torch.float32\n"
     ]
    }
   ],
   "source": [
    "for x in model0.parameters():\n",
    "    print(x.dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "7067fb30-3909-4a3e-bbf5-5f3a56d4c84f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "RuntimeError",
     "evalue": "You must train on the training inputs!",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[53], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mmodel0\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mzeros\u001b[49m\u001b[43m(\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m102\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mto\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdevice\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/mnt/infonas/data/eeshaan/fairness/elk_audit/lib/python3.9/site-packages/gpytorch/models/exact_gp.py:257\u001b[0m, in \u001b[0;36mExactGP.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    255\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m settings\u001b[38;5;241m.\u001b[39mdebug\u001b[38;5;241m.\u001b[39mon():\n\u001b[1;32m    256\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mall\u001b[39m(torch\u001b[38;5;241m.\u001b[39mequal(train_input, \u001b[38;5;28minput\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m train_input, \u001b[38;5;28minput\u001b[39m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(train_inputs, inputs)):\n\u001b[0;32m--> 257\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mRuntimeError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYou must train on the training inputs!\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    258\u001b[0m res \u001b[38;5;241m=\u001b[39m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;241m*\u001b[39minputs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    259\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m res\n",
      "\u001b[0;31mRuntimeError\u001b[0m: You must train on the training inputs!"
     ]
    }
   ],
   "source": [
    "model0(torch.zeros((1,102)).to(device))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50b4dde2-eb36-4759-b731-3d65aaca8788",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74dc72c8-8a59-43fb-af67-88c43d085b53",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2d3b80e2-084a-443d-90b1-891a57a3afa9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7ea1f072",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5646a0391f2a447a8379468fae760847",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/4000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1100, 1]) torch.int64\n",
      "torch.Size([1100, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4e2186a455754836a602079bf605b4a4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1200, 1]) torch.int64\n",
      "torch.Size([1200, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d86ed97e914f48fcb26d2916d3d69052",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1300, 1]) torch.int64\n",
      "torch.Size([1300, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7041e543add84a1f953bd7d805912656",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1400, 1]) torch.int64\n",
      "torch.Size([1400, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9a5d383041c74b4784a7844cc0aff457",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1500, 1]) torch.int64\n",
      "torch.Size([1500, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1e33b1b49e7043a8932ce8ef4ef65d98",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1600, 1]) torch.int64\n",
      "torch.Size([1600, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b89fb9230e464878805d6c94240f89f5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1700, 1]) torch.int64\n",
      "torch.Size([1700, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dfea5566c1bd41b997e3614ac74e2d2d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1800, 1]) torch.int64\n",
      "torch.Size([1800, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fc7d53ea46a0445aae90ea8f21b61757",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1900, 1]) torch.int64\n",
      "torch.Size([1900, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6ab0c1235a7d4784838df847d754c13c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2000, 1]) torch.int64\n",
      "torch.Size([2000, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2c13aaea73764346a6e503f956260293",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2100, 1]) torch.int64\n",
      "torch.Size([2100, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2aab08fb82a744668061927cb1e5382c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2200, 1]) torch.int64\n",
      "torch.Size([2200, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "09135cd1397b4e7ab47c72cde3e193e7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2300, 1]) torch.int64\n",
      "torch.Size([2300, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d6ae92f3acc74af08c69680bef6b84ae",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2400, 1]) torch.int64\n",
      "torch.Size([2400, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5d73f5835b0b43e7976d429de6abf9dc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2500, 1]) torch.int64\n",
      "torch.Size([2500, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1693b5d2680a4550aeb69a414eeab16f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2600, 1]) torch.int64\n",
      "torch.Size([2600, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "184d1615a36d4b3f8b85783988dd589f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2700, 1]) torch.int64\n",
      "torch.Size([2700, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "63ac5007704e42ec8eeab8e939cf7630",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2800, 1]) torch.int64\n",
      "torch.Size([2800, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8438888186e7487f8a87e342ac459567",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2900, 1]) torch.int64\n",
      "torch.Size([2900, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a61d426d88d6474280589a8435fe2a66",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([3000, 1]) torch.int64\n",
      "torch.Size([3000, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cc9e78f06af64339a378d7a014c56c3d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([3100, 1]) torch.int64\n",
      "torch.Size([3100, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dac4744854d448cc9e1158963841e988",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([3200, 1]) torch.int64\n",
      "torch.Size([3200, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "43ca9029527d437f88d667b9d62ed7a2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([3300, 1]) torch.int64\n",
      "torch.Size([3300, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9295d372c3054b92b4e3d2d6ccfb1402",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([3400, 1]) torch.int64\n",
      "torch.Size([3400, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "597caa23eb8a48edb043934870405863",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([3500, 1]) torch.int64\n",
      "torch.Size([3500, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "23c79f4dcd5a4560af02a8ce9d98cc2f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([3600, 1]) torch.int64\n",
      "torch.Size([3600, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8b5a599eb59847caae2902d8d402ee94",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([3700, 1]) torch.int64\n",
      "torch.Size([3700, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4c7d83f2cd604cd29745351898cad267",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([3800, 1]) torch.int64\n",
      "torch.Size([3800, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4b04248ec61c44869f577e97c67a46c0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([3900, 1]) torch.int64\n",
      "torch.Size([3900, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4de1842a1890483ea5bd12ad994c55a4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4000, 1]) torch.int64\n",
      "torch.Size([4000, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3a44bc383c28417b8059e5947f1123c3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4100, 1]) torch.int64\n",
      "torch.Size([4100, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ad921b0903ed4519ad4c9b206e846ef4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4200, 1]) torch.int64\n",
      "torch.Size([4200, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "80c0250ff1f145968b5c917a76b3e8df",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4300, 1]) torch.int64\n",
      "torch.Size([4300, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c0bd066a0e8842229225e934b0c17f09",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4400, 1]) torch.int64\n",
      "torch.Size([4400, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "46df51dafcdd4097896d4f47fc2d2cc8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4500, 1]) torch.int64\n",
      "torch.Size([4500, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3d0f54b2dce144df80711cd9241ee819",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4600, 1]) torch.int64\n",
      "torch.Size([4600, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9bb7d5741ba2447994613d69f45e067b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4700, 1]) torch.int64\n",
      "torch.Size([4700, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1499cd6243324524ab06b1037640812c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4800, 1]) torch.int64\n",
      "torch.Size([4800, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cb5a72f6c7304defb9dc4b4307ccd34a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4900, 1]) torch.int64\n",
      "torch.Size([4900, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e847553b5d604e46813e902205267e36",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([5000, 1]) torch.int64\n",
      "torch.Size([5000, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "95e234a9e931452780bd0880f464a1cc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lambda_reg = 1.0\n",
    "candidates = []\n",
    "neg_queried = warm_start_x0.clone()\n",
    "neg_labels = warm_start_y0.clone().unsqueeze(1)\n",
    "\n",
    "for epoch_outer in tqdm(range(1, 4001)):\n",
    "    x0_random = torch.normal(0.,1.,size=(1,102), dtype=torch.float32, requires_grad=True)\n",
    "    optimizer0 = torch.optim.AdamW((x0_random,), lr=1.0)\n",
    "    best_loss = 10e5\n",
    "    count = 0\n",
    "    losses = []\n",
    "    for epoch in range(1,100):\n",
    "        optimizer0.zero_grad()\n",
    "        x0_samples = utils.postprocess(\n",
    "            vae0.sample(x0_random.to(device), 100, device, \n",
    "                        **{'tau': 1.0, 'tau_min': 0.1, 'anneal_rate': 3e-5, 'steps': 0, 'hard': False}).squeeze(1),\n",
    "            'adult_income'\n",
    "        )\n",
    "        obj0 = likelihood0(model0(x0_samples.to(device))).variance.sum(axis=0).mean() - lambda_reg * ((x0_random.to(device) - x0_samples)**2).mean()\n",
    "#         print(obj0.shape)\n",
    "        loss = -obj0\n",
    "        loss.backward()\n",
    "        optimizer0.step()\n",
    "        if loss < best_loss:\n",
    "            best_loss = loss\n",
    "            count = 0\n",
    "            losses.append(loss)\n",
    "        else:\n",
    "            count += 1\n",
    "        if count  == 5:\n",
    "            break\n",
    "    x0_query = dfx_0.iloc[np.argmin(np.linalg.norm(np.array(dfx_0) - x0_random.detach().clone().numpy()))]\n",
    "    candidates.append(torch.Tensor([x0_query]).float().to(device))\n",
    "    \n",
    "    if epoch_outer % 100 == 0:\n",
    "        new_vals = torch.concatenate(candidates)\n",
    "        new_queries,_, _ = vae0(new_vals.to(device), **{'tau': 1.0, 'tau_min': 0.1, 'anneal_rate': 3e-5, 'steps': 0, 'hard': False})\n",
    "        new_labels = blackbox(new_queries)\n",
    "        neg_queried = torch.concatenate([neg_queried, new_queries])\n",
    "        neg_labels = torch.concatenate([neg_labels, (0.5*(torch.sign(new_labels - 0.5) + 1.0)).long().detach().clone()])\n",
    "        print(neg_labels.shape, neg_labels.dtype)\n",
    "        print(neg_queried.shape, neg_queried.dtype)\n",
    "        model0, likelihood0 = train(neg_queried.detach().clone(),neg_labels.flatten())\n",
    "        model0.eval()\n",
    "        likelihood0.eval()\n",
    "        candidates = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b8a6b87b",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1000, 1]) torch.int64\n",
      "torch.Size([1000, 102]) torch.float32\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d8577836a14f405eb5a365e66409ae1f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/4000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7d572cb71c9945ecbcdd7dc6e1fcc5c9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "86d1bc9f085449e2bdc24f10059669f7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "04d1d68db8b244788c3de0a4b985ed3c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ea8c3e803f864d1481d7cf662e67f598",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ff3aa354d5d44613917dee9a0b406047",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "088ae3c4f8fc4f758dec2275c6b9b45f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2d2d9ef0263c4c4ba94d6b2e6efcce4c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "54517f3e5c5e475dbc43fd6cf19225ac",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f5b67e2d2aac45d4850b1fee6a2859a3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "420e1266232b4f6b964b79dda50772f3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6ecb7a7a710d41fd84c99dfb70ef3489",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bc708841c10449d0b28573667876ef0d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9ed506632c654530bf8e0946f160710d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "98823bcb1d794a288a9d7889efe13fd2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e02933b6f9c04eb68b45d845830b5ace",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "87dc537a486b4a10a76907b3fe50e8e7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "118a489f0b5d4f339f50a903fa178ee4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1d0d763e6c844e7b9e89f290b09afb1b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2c325a5cb0ce4ad1bcc73f0a5d470e7c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "22885217c44e41b7a71cd49f80f1e43f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "348f4c20ae3348f4988a45359037a3f5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "30f59338cd96457f84f06c7e5e4f91f4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8439b9a7f05e445c866794390314c73d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f913b98c8b7847c8b1ddcaf9ea19518f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "abcb8803cf2040129d83ae18fdbc9993",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bcc2a6cfb24a4b32871399ffc53117f4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "52e79ddd18a84fe79ab1641579ddf507",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "eb9c0297660c48c98ef2876f8a95a80d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "25b91f9d3c724d039d52e62d51eb5fab",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e883217b5fb746b69515df7a57430e59",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2c63f9f21c43446d8c8cabd71b24c48b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d20c39fce7e84144aec1fc855193d85f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4157834841e84056ba92f0196fb0070b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ee321047068c4ecea839b4d431e5bad5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2f8abfbb36f1478d80d4c8b785629984",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ec755c6cdec943ef99053114faacdeec",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6e86ffe9708e453f9a68784a7d5f51cf",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f681fc379dda4586a5fb61ed74a14545",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "79c17bf0280749b7aa2166ba27669044",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6f99d004d84449c6bb1fd5763c4e7611",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/50 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "candidates = []\n",
    "pos_queried = warm_start_x1.clone()\n",
    "pos_labels = warm_start_y1.clone().unsqueeze(1)\n",
    "print(pos_labels.shape, pos_labels.dtype)\n",
    "print(pos_queried.shape, pos_queried.dtype)\n",
    "\n",
    "for epoch_outer in tqdm(range(1, 4001)):\n",
    "    x1_random = torch.normal(0.,1.,size=(1,102), dtype=torch.float32, requires_grad=True)\n",
    "    optimizer1 = torch.optim.AdamW((x1_random,), lr=1.0)\n",
    "    best_loss = 10e5\n",
    "    count = 0\n",
    "    losses = []\n",
    "    for epoch in range(1,100):\n",
    "        optimizer1.zero_grad()\n",
    "        x1_samples = utils.postprocess(\n",
    "            vae1.sample(x1_random.to(device), 100, device, \n",
    "                        **{'tau': 1.0, 'tau_min': 0.1, 'anneal_rate': 3e-5, 'steps': 0, 'hard': False}).squeeze(1),\n",
    "            'adult_income'\n",
    "        )\n",
    "        obj1 = likelihood1(model1(x1_samples.to(device))).variance.sum(axis=0).mean() - lambda_reg * ((x1_random.to(device) - x1_samples)**2).mean()\n",
    "#         print(obj0.shape)\n",
    "        loss = -obj1\n",
    "        loss.backward()\n",
    "        optimizer1.step()\n",
    "        if loss < best_loss:\n",
    "            best_loss = loss\n",
    "            count = 0\n",
    "            losses.append(loss)\n",
    "        else:\n",
    "            count += 1\n",
    "        if count  == 5:\n",
    "            break\n",
    "    x1_query = dfx_1.iloc[np.argmin(np.linalg.norm(np.array(dfx_1) - x1_random.detach().clone().numpy()))]\n",
    "    candidates.append(torch.Tensor([x1_query]).float().to(device))\n",
    "    \n",
    "    if epoch_outer % 100 == 0:\n",
    "        new_vals = torch.concatenate(candidates)\n",
    "        new_queries,_ , _ = vae1(new_vals.to(device), **{'tau': 1.0, 'tau_min': 0.1, 'anneal_rate': 3e-5, 'steps': 0, 'hard': False})\n",
    "        new_labels = blackbox(new_queries)\n",
    "        pos_queried = torch.concatenate([pos_queried, new_queries])\n",
    "        pos_labels = torch.concatenate([pos_labels, (0.5*(torch.sign(new_labels - 0.5) + 1.0)).long().detach().clone()])\n",
    "        model1, likelihood1 = train(pos_queried.detach().clone(),pos_labels.flatten())\n",
    "        model1.eval()\n",
    "        likelihood1.eval()\n",
    "        candidates = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ee3f53a2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([5000, 1])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pos_labels.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ba3888ca",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([100, 1])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_labels.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "82ea831e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.19911019753072282"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# parity in data\n",
    "np.abs(dfy[dfx[dfx.gender == 0].index].mean() - dfy[dfx[dfx.gender == 1].index].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "684ded57",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "bb_input0 = torch.from_numpy(dfx_0.values).float().to(device)\n",
    "bb_input1 = torch.from_numpy(dfx_1.values).float().to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7a4f2648-312a-4892-b559-726fc4f983bd",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "y0 = blackbox(bb_input0)\n",
    "y1 = blackbox(bb_input1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "53cac80a-56d0-45b1-b964-95ca2074d27d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "y0_ = torch.round(y0)\n",
    "y1_ = torch.round(y1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7b3f90e4-0472-46e6-909d-04d52f193dfa",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(7659., device='cuda:0', grad_fn=<SumBackward0>)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y0_.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "30e43df0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.1869, device='cuda:0', grad_fn=<AbsBackward0>)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.abs(y0_.mean() - y1_.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "890e743e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.0406, device='cuda:0')"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dp_value = torch.abs(pos_labels.squeeze().float().mean() - neg_labels.squeeze().float().mean())\n",
    "dp_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "63f393a6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.0196, device='cuda:0')"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pos_labels.float().mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ea69664a-6988-471e-a299-c9ed538aab04",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(0.0602, device='cuda:0')"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_labels.float().mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "738ccfdc-775d-494a-a237-9272da4ebdc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "torch.save(dp_value, 'results/adult_income/dp_value_vanilla_vae_reg.pt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0d9d14a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
